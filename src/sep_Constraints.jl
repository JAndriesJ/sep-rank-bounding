module sep_Constraints

using LinearAlgebra

srcDir = dirname(@__FILE__)*"\\"
include(srcDir*"Utils.jl")
include(srcDir*"Moments.jl")
using .Utils
using .Moments

export make_loc_cons_S‚ÇÅ,
       make_loc_cons_S‚ÇÇ,
       make_loc_cons_S‚ÇÉ,
       make_weakG_con,
       make_G_con

"""
L ‚â• 0 on M‚ÇÇ‚Çú(S_œÅ¬π)
‚ü∫
L(g‚ãÖ[x,y]‚Çú‚Çã‚ÇÅ[x,y]‚Çú‚Çã‚ÇÅ·µÄ) ‚™∞ 0 for
g = ‚àö(œÅ‚Çò‚Çê‚Çì) - x·µ¢¬≤ , ‚àö(œÅ‚Çò‚Çê‚Çì) - y·µ¢¬≤ and i ‚àà [d]
"""
function make_loc_cons_S‚ÇÅ(œÅ,t::Int64,d::Int64,Lx)
    n       = 2*d
    MB      = make_mon_expo_mat(n,t-1)
    sqr_œÅ   = sqrt(maximum(œÅ))
    s       = size(MB)[1]
    make_loc_con(e·µ¢) = sqr_œÅ*Utils.index_to_var(Lx, MB) - Utils.index_to_var(Lx, MB + repeat([2*e·µ¢], s, s))
    loc_con = Dict()
    for k in 1:d
            e‚Çñ = Utils.e·µ¢(n,k)
            e‚Çñ‚Çäd = Utils.e·µ¢(n,k+d)
            # Constraint:  L ‚âß 0 on ùëÄ(S·∂ú·µñ)   : L((‚àö(œÅ‚Çò‚Çê‚Çì) - x·µ¢¬≤))‚ãÖ[x,y]‚Çú‚Çã‚ÇÅ[x,y]‚Çú‚Çã‚ÇÅ·µÄ) ‚™∞ 0
            loc_con[(k,1)] = make_loc_con(e‚Çñ)
            # Constraint:  L ‚âß 0 on ùëÄ(S·∂ú·µñ)   : L((‚àö(œÅ‚Çò‚Çê‚Çì) - y·µ¢¬≤))‚ãÖ[x,y]‚Çú‚Çã‚ÇÅ[x,y]‚Çú‚Çã‚ÇÅ·µÄ) ‚™∞ 0
            loc_con[(k,2)] = make_loc_con(e‚Çñ‚Çäd)
    end
    return loc_con
end

"""
L ‚â• 0 on M‚ÇÇ‚Çú(S_œÅ¬≤)
‚ü∫
L(g‚ãÖ[x,y]‚Çú‚Çã‚ÇÅ[x,y]‚Çú‚Çã‚ÇÅ·µÄ) ‚™∞ 0 for
g = ‚àö(Tr(œÅ)) - ‚àëx·µ¢¬≤ , ‚àö(Tr(œÅ)) - ‚àëy·µ¢¬≤
"""
function make_loc_cons_S‚ÇÇ(œÅ,t::Int64,d::Int64,Lx)
    n       = 2*d
    MB      = make_mon_expo_mat(n,t-1)
    sqrt_tr_œÅ   = sqrt(tr(œÅ))
    s       = size(MB)[1]
    # L((‚àëx·µ¢¬≤)‚ãÖ[x,y]‚Çú‚Çã‚ÇÅ[x,y]‚Çú‚Çã‚ÇÅ·µÄ )
    xRterm = sum([Utils.index_to_var(Lx, MB .+ [2* Utils.e·µ¢(n,k)]) for k in 1:d ])
    # L((‚àëy·µ¢¬≤)‚ãÖ[x,y]‚Çú‚Çã‚ÇÅ[x,y]‚Çú‚Çã‚ÇÅ·µÄ )
    yRterm = sum([Utils.index_to_var(Lx, MB .+ [2* Utils.e·µ¢(n,k+d)]) for k in 1:d ])
    #  ‚àö(œÅ‚Çò‚Çê‚Çì)‚ãÖL([x,y]‚Çú‚Çã‚ÇÅ[x,y]‚Çú‚Çã‚ÇÅ·µÄ) - L((‚àëx·µ¢¬≤)‚ãÖ[x,y]‚Çú‚Çã‚ÇÅ[x,y]‚Çú‚Çã‚ÇÅ·µÄ )
    g‚ÇÅ = sqrt_tr_œÅ*Utils.index_to_var(Lx, MB) - xRterm
    #  ‚àö(œÅ‚Çò‚Çê‚Çì)‚ãÖL([x,y]‚Çú‚Çã‚ÇÅ[x,y]‚Çú‚Çã‚ÇÅ·µÄ) - L((‚àëy·µ¢¬≤)‚ãÖ[x,y]‚Çú‚Çã‚ÇÅ[x,y]‚Çú‚Çã‚ÇÅ·µÄ )
    g‚ÇÇ = sqrt_tr_œÅ*Utils.index_to_var(Lx, MB) - yRterm
    loc_con = Dict(1 => g‚ÇÅ, 2 => g‚ÇÇ)
    return loc_con
end


"""
L ‚â• 0 on M‚ÇÇ‚Çú(S_œÅ¬≥)
‚ü∫
L((Tr(œÅ) - ‚àëx·µ¢¬≤)‚ãÖ[x,y]‚Çú‚Çã‚ÇÅ[x,y]‚Çú‚Çã‚ÇÅ·µÄ) ‚™∞ 0
L((sqrt(‚àëy·µ¢¬≤) - 1)‚ãÖ[x,y]‚Çú‚Çã‚ÇÅ[x,y]‚Çú‚Çã‚ÇÅ·µÄ) = 0
"""
function make_loc_cons_S‚ÇÉ(œÅ,t::Int64,d::Int64,Lx)
    n       = 2*d
    MB      = make_mon_expo_mat(n,t-1)
    tr_œÅ    = tr(œÅ)
    s       = size(MB)[1]
    MBLx    = Utils.index_to_var(Lx, MB)
    # L((‚àëx·µ¢¬≤)‚ãÖ[x,y]‚Çú‚Çã‚ÇÅ[x,y]‚Çú‚Çã‚ÇÅ·µÄ )
    xRterm = sum([Utils.index_to_var(Lx, MB .+ [2* Utils.e·µ¢(n,k)]) for k in 1:d ])
    #  tr(œÅ)‚ãÖL([x,y]‚Çú‚Çã‚ÇÅ[x,y]‚Çú‚Çã‚ÇÅ·µÄ) - L((‚àëx·µ¢¬≤)‚ãÖ[x,y]‚Çú‚Çã‚ÇÅ[x,y]‚Çú‚Çã‚ÇÅ·µÄ ) ‚™∞ 0
    g‚ÇÅ = tr_œÅ*MBLx - xRterm
    loc_con = Dict(1 => g‚ÇÅ)

    # L((‚àëy·µ¢¬≤)‚ãÖ[x,y]‚Çú‚Çã‚ÇÅ[x,y]‚Çú‚Çã‚ÇÅ·µÄ )
    yRterm = sum([Utils.index_to_var(Lx, MB .+ [2* Utils.e·µ¢(n,k+d)]) for k in 1:d ])
    # L([x,y]‚Çú‚Çã‚ÇÅ[x,y]‚Çú‚Çã‚ÇÅ·µÄ) - L((‚àëy·µ¢¬≤)‚ãÖ[x,y]‚Çú‚Çã‚ÇÅ[x,y]‚Çú‚Çã‚ÇÅ·µÄ ) = 0
    g‚ÇÇ = MBLx - yRterm

    return loc_con, g‚ÇÇ
end


"""
Input: A(data matrix),t(Integer),Lx(JuMP variable)
Output: L((œÅ - ([x,y]‚Çå‚ÇÅ[x,y]‚Çå‚ÇÅ·µÄ)) ‚äó ([x,y]‚Çå‚Çó[x,y]‚Çå‚Çó·µÄ)))for l ‚àà 1,...,t-2.
= œÅ‚äóL([x,y]‚Çå‚Çó[x,y]‚Çå‚Çó·µÄ) - L(([x,y]‚Çå‚ÇÅ[x,y]‚Çå‚ÇÅ·µÄ)‚äó([x,y]‚Çå‚Çó[x,y]‚Çå‚Çó·µÄ))
"""
function make_weakG_con(œÅ,t::Int64,d::Int64,Lx)
    n = 2*d
    weakG_con = Dict()
    xx·µÄ_tens_yy·µÄ         = make_xx·µÄ_tens_yy·µÄ(d)            # exponents of xx·µÄ‚äóyy·µÄ
    for ‚Ñì in 1:(t-2)
        LMBexp_‚Ñì          = make_mon_expo_mat(n,‚Ñì,false)   # exponents of [x,y]‚Çå‚Çó[x,y]‚Çå‚Çó·µÄ
        LMBexp_1‚Ñì         = var_kron(xx·µÄ_tens_yy·µÄ,LMBexp_‚Ñì)# exponents of  (xx·µÄ‚äóyy·µÄ)‚äó([x,y]‚Çå‚Çó[x,y]‚Çå‚Çó·µÄ)
        LMB_‚Ñì             = Utils.index_to_var(Lx,LMBexp_‚Ñì)      # L([x,y]‚Çå‚Çó[x,y]‚Çå‚Çó·µÄ)
        Rterm             = Utils.index_to_var(Lx,LMBexp_1‚Ñì)     # L((xx·µÄ‚äóyy·µÄ)‚äó([x,y]‚Çå‚Çó[x,y]‚Çå‚Çó·µÄ))

        Lterm             = kron(œÅ,LMB_‚Ñì)                  # œÅ‚äóL([x,y]‚Çå‚Çó[x,y]‚Çå‚Çó·µÄ)
        weakG_con[‚Ñì]      = Lterm - Rterm                  # œÅ‚äóL([x,y]‚Çå‚Çó[x,y]‚Çå‚Çó·µÄ) - L((xx·µÄ‚äóyy·µÄ)‚äó([x,y]‚Çå‚Çó[x,y]‚Çå‚Çó·µÄ)) ‚™∞ 0, ‚Ñì ‚àà ,1,t-deg(G)/2
    end
    return weakG_con
end

"""M(GœÅ ‚äó L) ‚™∞ 0 constraints
Where: GœÅ := œÅ - xx·µÄ‚äóyy·µÄ
M(GœÅ ‚äó L) = L(GœÅ ‚äó [x, y]‚Çú‚Çã‚ÇÇ[x, y]·µÄ‚Çú‚Çã‚ÇÇ) ‚™∞ 0
output: œÅ‚äóL([x, y]‚Çú‚Çã‚ÇÇ[x, y]·µÄ‚Çú‚Çã‚ÇÇ) - L( (xx·µÄ‚äóyy·µÄ) ‚äó ([x, y]‚Çú‚Çã‚ÇÇ[x, y]·µÄ‚Çú‚Çã‚ÇÇ) )
"""
function make_G_con(œÅ,t::Int64,d::Int64,Lx)
    n = 2*d
    xx·µÄ_tens_yy·µÄ       = make_xx·µÄ_tens_yy·µÄ(d)          # exponents of xx·µÄ‚äóyy·µÄ
    LMBexp‚Çú‚Çã‚ÇÇ          = make_mon_expo_mat(n,t-2,true) # exponents of [x, y]‚Çú‚Çã‚ÇÇ[x, y]·µÄ‚Çú‚Çã‚ÇÇ
    LMB‚Çú‚Çã‚ÇÇ             = Utils.index_to_var(Lx,LMBexp‚Çú‚Çã‚ÇÇ)    # L([x, y]‚Çú‚Çã‚ÇÇ[x, y]·µÄ‚Çú‚Çã‚ÇÇ)
    Lterm              = kron(œÅ,LMB‚Çú‚Çã‚ÇÇ)               # œÅ‚äóL([x, y]‚Çú‚Çã‚ÇÇ[x, y]·µÄ‚Çú‚Çã‚ÇÇ)

    LMBexp_1‚Çú‚Çã‚ÇÇ        = var_kron(xx·µÄ_tens_yy·µÄ,LMBexp‚Çú‚Çã‚ÇÇ)  # exponents of (xx·µÄ‚äóyy·µÄ) ‚äó ([x, y]‚Çú‚Çã‚ÇÇ[x, y]·µÄ‚Çú‚Çã‚ÇÇ)
    Rterm              = Utils.index_to_var(Lx,LMBexp_1‚Çú‚Çã‚ÇÇ)    # L( (xx·µÄ‚äóyy·µÄ) ‚äó ([x, y]‚Çú‚Çã‚ÇÇ[x, y]·µÄ‚Çú‚Çã‚ÇÇ) )

    G_con = Lterm - Rterm                              # œÅ‚äóL([x, y]‚Çú‚Çã‚ÇÇ[x, y]·µÄ‚Çú‚Çã‚ÇÇ) - L( (xx·µÄ‚äóyy·µÄ) ‚äó ([x, y]‚Çú‚Çã‚ÇÇ[x, y]·µÄ‚Çú‚Çã‚ÇÇ) )
    return G_con
end



end
